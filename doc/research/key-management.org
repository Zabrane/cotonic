* Key Management

** Conclusion
   
There is no off the shelf solution which works for us. We are aiming
for a distributed setup. This is more suited for a PKI setup instead
of a simpler key-server solution.

Design Choices:

- PKI
- /Fast expiration/, short lived certificates, no need for revocation
  lists.
- Credential style limitations for sub-CA's with a custom certificate
  restriction language which we need to design.
  

* Server Keys

Longer lived keys
Erlang


* Client Side,


Info on browser crypto.

https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet

https://pomcor.com/2017/06/02/keys-in-browser/
https://www.w3.org/TR/WebCryptoAPI/
https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API
https://www.w3.org/TR/IndexedDB/
https://www.boxcryptor.com/en/blog/post/building-an-app-with-webcrypto-in-2016/
https://gist.github.com/saulshanabrook/b74984677bccd08b028b30d9968623f5
https://blog.engelke.com/2014/09/19/saving-cryptographic-keys-in-the-browser/

** Questions

*** Where to store keys and attributes.

- sessionStorage, per tab/site storage. When the tab closes, the data
  is gone.
- localStorage, per site storage. Data is shared between tabs, and
  stored on the computer.
- indexDB, indexed storage of items, queryable. (but partial support
  in IE11)

Private keys can be generated in such a way that they can't be
exported by javascript code. These kind of keys can be stored in the
indexedDB, sessionStorage and localStorage because they support the
structured clone algorithm. I've looked up Firefox' implementation.
They support this by dumping the private key to a PKCS8 blob. This
blob is not protected. When it is stored on disk it possible to find
it easily. It is however protected from the javascript side.
  
*** What parts of indexDB is not supported by IE11?

There is a shim. https://github.com/axemclion/IndexedDBShim

And here explanation: https://gist.github.com/nolanlawson/a841ee23436410f37168

*** What happens with the sessionStorage?

- Is it deleted? Was it stored on disk or just memory.


*** How fast is key generation?

On my iMac (i5, 3.3 Ghz) generating a 2048 bit RSA key costs, 200ish
microseconds. A 1024 bit key 30-ish.

Also interesting, it is possible to create a key-pair in such a way
that it is not possible to extract the key so you can re-use the key
later. This sounds like an interesting way to generate temporary keys.

#+NAME: key-generation
#+BEGIN_SRC js
let promise = crypto.subtle.generateKey(
    {
        name: "RSA-OAEP",
        modulusLength: 1024,
        publicExponent: new Uint8Array([1, 0, 1]),  // 24 bit representation of 65537
            hash: {name: "SHA-256"}
        },
        false,   // <-- can extract private part later.
        ["encrypt", "decrypt"]
)
#+END_SRC

*** Standards

**** JWS - JSON Web Signature

**** JWE - JSON Web Encryption

**** JWT - JSON Web Token. Looks nice. Uses a three part datastructure.

- Header
- Claims
- JWS (Json web signature)

hhhh.cccc.gggg

Everything base64url encoded.

Data is signed only, so don't include sensitive data.

In practice the tokens are used from server to client, and as bearer
token. You only have to present the token, not proof something.

**** FIDO Alliance

Cooperation between industry users. Doing work on authentication with
smartcards and F2A devices. 

Specifications

https://fidoalliance.org/download/

**** Microsoft

https://www.microsoft.com/en-us/research/project/u-prove/

*** Short lived?
    
*** Regenerate often? 

*** How to authenticate server keys?

** Papers

*** Resurrecting Duckling

https://www.cl.cam.ac.uk/~fms27/papers/1999-StajanoAnd-duckling.pdf

*** Key Continuity Management

https://simson.net/thesis/pki3.pdf

This is SSH's model.

Under normal operation SSH alerts the *first* time that a new service is
contacted. After that first contact, however, SSH is silent unless
the serverâ€™s key changes.

*** Overview by NIST

http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-130.pdf

*** Ceremony Design and Analysis

https://eprint.iacr.org/2007/399.pdf

*** Understanding Trust Management Systems
    
Mathematical framework for ex- pressing trust management systems.  he
framework makes it easier to understand existing systems and to
compare them to one another, as well as to design new systems. The
framework defines the semantics of a trust management en- gine via a
least fixpoint in a lattice, which, in some situa- tions, leads to an
efficient implementation.

https://pdfs.semanticscholar.org/53f5/2937613ff2b58e8eebc29c7994424ac7eada.pdf

*** Trust Structures - Denotational and Operational Semantics

https://users-cs.au.dk/krukow/research/publications/online_papers/krukow-nielsen_DTM.pdf
